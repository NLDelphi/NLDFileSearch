<?xml version="1.0" standalone="yes"?>
<!-- Database DBF -->
<!-- Generated by Delphi Component Help Builder -->
<!-- Program Version 2.0 -->
<!-- Comments  -->
<!-- File Version 2.0.3.72 -->
<!-- Data Version 2 -->
<!-- Time Stamp 03/29/2004 14:45:07 -->
<project PK="100015">
<project_name>NLDFileSearch</project_name>
<project_helpfilename>C:\nldelphi\opensource\goleztrol\nldfilesearch\help\nldfiles.hlp</project_helpfilename>
<project_shortdescription>Author:  Jos Visser, aka GolezTrol
Date:    January 2003
Web:     http://www.goleztrol.nl/


For the latest version and feedback, visit the NLDFileSearch forum at NLDelphi:


http://www.nldelphi.com/Forum/forumdisplay.php?forumid=73
</project_shortdescription>
<project_description>NLDFileSearch provides various easy ways to wrap around the FindFirst/FindNext APIs. Three procedures are implemented to easily obtain a listof files:


- NLDEnumFiles
Search a folder and report each found file to callback procedure ofclass method.


- NLDGetFiles
Search a folder and add each found file to a TStrings instance.


These methods use descendants of the TNLDCustomFileSearch helper class.This customizable class does the actual searching and triggers an event foreach file that matches the search criteria (Mask and Options).



</project_description>
<project_charset>1</project_charset>
<project_fkprojectd>2</project_fkprojectd>
<package PK="100023">
<package_fkproject>100015</package_fkproject>
<package_name>NLDFileSearch</package_name>
<package_shortdescription>Author:  Jos Visser, aka GolezTrol
Date:    January 2003
Web:     http://www.goleztrol.nl/


For the latest version and feedback, visit the NLDFileSearch forum at NLDelphi:


http://www.nldelphi.com/Forum/forumdisplay.php?forumid=73
</package_shortdescription>
<package_description>NLDFileSearch provides various easy ways to wrap around the FindFirst/FindNext APIs. Three procedures are implemented to easily obtain a listof files:


- NLDEnumFiles
Search a folder and report each found file to callback procedure ofclass method.


- NLDGetFiles
Search a folder and add each found file to a TStrings instance.


These methods use descendants of the TNLDCustomFileSearch helper class.This customizable class does the actual searching and triggers an event foreach file that matches the search criteria (Mask and Options).



</package_description>
<package_filepath>C:\nldelphi\opensource\goleztrol\nldfilesearch\NLDFileSearchD6R.dpk</package_filepath>
<package_isactive>Yes</package_isactive>
<unit PK="100130">
<unit_fkproject>100015</unit_fkproject>
<unit_fkpackage>100023</unit_fkpackage>
<unit_name>NLDFileSearch</unit_name>
<unit_filepath>NLDFileSearch.pas</unit_filepath>
<unit_shortdescription>Author:  Jos Visser, aka GolezTrol
Date:    January 2003
Web:     http://www.goleztrol.nl/


For the latest version and feedback, visit the NLDFileSearch forum at NLDelphi:


http://www.nldelphi.com/Forum/forumdisplay.php?forumid=73
</unit_shortdescription>
<unit_description>NLDFileSearch provides various easy ways to wrap around the FindFirst/FindNext APIs. Three procedures are implemented to easily obtain a listof files:


- NLDEnumFiles
Search a folder and report each found file to callback procedure ofclass method.


- NLDGetFiles
Search a folder and add each found file to a TStrings instance.


These methods use descendants of the TNLDCustomFileSearch helper class.This customizable class does the actual searching and triggers an event foreach file that matches the search criteria (Mask and Options).



</unit_description>
<unit_isactive>Yes</unit_isactive>
<object PK="100446">
<object_fkunit>100130</object_fkunit>
<object_fkproject>100015</object_fkproject>
<object_name>TNLDCustomFileSearch</object_name>
<object_inheritedfrom>TComponent</object_inheritedfrom>
<object_declaration>TNLDCustomFileSearch = class(TComponent)</object_declaration>
<object_description>When a file is found in the EnumFiles method the OnFoundFile event is raised. Descendants can override DoFoundFile to respond to found files.
</object_description>
<object_shortdescription>Base class for file searches.
</object_shortdescription>
<object_bitmapobject_bitmap>
<object_isactive>Yes</object_isactive>
<method PK="101036">
<method_fkobject>100446</method_fkobject>
<method_fkproject>100015</method_fkproject>
<method_name>Create</method_name>
<method_declaration>constructor Create(AOwner: TComponent); overload; override;</method_declaration>
<method_shortdescription>Creates a new TNLDCustomFileSearch instance
</method_shortdescription>
<method_isactive>Yes</method_isactive>
<method_visibility>Public</method_visibility>
</method>
<method PK="101037">
<method_fkobject>100446</method_fkobject>
<method_fkproject>100015</method_fkproject>
<method_name>Create</method_name>
<method_declaration>constructor Create(); reintroduce; overload;</method_declaration>
<method_shortdescription>Creates a new TNLDCustomFileSearch instance without an owner set
</method_shortdescription>
<method_isactive>Yes</method_isactive>
<method_visibility>Public</method_visibility>
</method>
<method PK="101038">
<method_fkobject>100446</method_fkobject>
<method_fkproject>100015</method_fkproject>
<method_name>Destroy</method_name>
<method_declaration>destructor Destroy(); override;</method_declaration>
<method_description>Do not call Destroy directly. Call Free instead. Free verifies that the object reference is not nil before calling Destroy.
</method_description>
<method_shortdescription>Disposes of an object instance.
</method_shortdescription>
<method_isactive>Yes</method_isactive>
<method_visibility>Public</method_visibility>
</method>
<method PK="101039">
<method_fkobject>100446</method_fkobject>
<method_fkproject>100015</method_fkproject>
<method_name>Terminate</method_name>
<method_declaration>procedure Terminate(); virtual;</method_declaration>
<method_description>Calling Terminate while in an EnumFiles loop will break out of the loop, ignoring any remaining files. Calling Terminate in any other condition does not have any effect.
</method_description>
<method_shortdescription>Termines an active search.
</method_shortdescription>
<method_isactive>Yes</method_isactive>
<method_visibility>Public</method_visibility>
</method>
</object>
<object PK="100450">
<object_fkunit>100130</object_fkunit>
<object_fkproject>100015</object_fkproject>
<object_name>TNLDEnumFiles</object_name>
<object_inheritedfrom>TNLDCustomFileSearch</object_inheritedfrom>
<object_declaration>TNLDEnumFiles = class(TNLDCustomFileSearch)</object_declaration>
<object_description>Instead of events you may provide a callback procedure unrelated to an object.
</object_description>
<object_shortdescription>Allows file searches using a callback procedure.
</object_shortdescription>
<object_bitmapobject_bitmap>
<object_isactive>Yes</object_isactive>
<event PK="100288">
<event_fkobject>100450</event_fkobject>
<event_fkproject>100015</event_fkproject>
<event_name>FoundFileProc</event_name>
<event_declaration>property FoundFileProc: TNLDFoundFileProc read FFoundFileProc write FFoundFileProc;</event_declaration>
<event_shortdescription>Specifies the callback procedure to call when a file is found
</event_shortdescription>
<event_isactive>Yes</event_isactive>
</event>
<event PK="100289">
<event_fkobject>100450</event_fkobject>
<event_fkproject>100015</event_fkproject>
<event_name>FoundFileProcEx</event_name>
<event_declaration>property FoundFileProcEx: TNLDFoundFileExProc read FFoundFileExProc write FFoundFileExProc;</event_declaration>
<event_shortdescription>Specifies the extended callback procedure to call when a file is found
</event_shortdescription>
<event_isactive>Yes</event_isactive>
</event>
<event PK="100290">
<event_fkobject>100450</event_fkobject>
<event_fkproject>100015</event_fkproject>
<event_name>OnFoundFile</event_name>
<event_declaration>property OnFoundFile;</event_declaration>
<event_shortdescription>Raised when a file or directory is found.</event_shortdescription>
<event_isactive>Yes</event_isactive>
</event>
<event PK="100291">
<event_fkobject>100450</event_fkobject>
<event_fkproject>100015</event_fkproject>
<event_name>OnFoundFileEx</event_name>
<event_declaration>property OnFoundFileEx;</event_declaration>
<event_shortdescription>Raised when a file or directory is found.</event_shortdescription>
<event_isactive>Yes</event_isactive>
</event>
</object>
<object PK="100448">
<object_fkunit>100130</object_fkunit>
<object_fkproject>100015</object_fkproject>
<object_name>TNLDFileSearch</object_name>
<object_inheritedfrom>TNLDCustomFileSearch</object_inheritedfrom>
<object_declaration>TNLDFileSearch = class(TNLDCustomFileSearch)</object_declaration>
<object_shortdescription>Non-visual component for performing file searches.
</object_shortdescription>
<object_bitmapobject_bitmap>
<object_isactive>Yes</object_isactive>
<property PK="101764">
<property_fkobject>100448</property_fkobject>
<property_fkproject>100015</property_fkproject>
<property_name>Mask</property_name>
<property_type>String</property_type>
<property_description>The mask may contain wildchars (* and ?, DOS style).
</property_description>
<property_shortdescription>Determines the mask to use when searching for files.
</property_shortdescription>
<property_isactive>Yes</property_isactive>
<property_visibility>Published</property_visibility>
<property_iswrite>Yes</property_iswrite>
<property_isread>Yes</property_isread>
</property>
<property PK="101765">
<property_fkobject>100448</property_fkobject>
<property_fkproject>100015</property_fkproject>
<property_name>Options</property_name>
<property_type>TFSOptions</property_type>
<property_description>For more information, see TFSOption
</property_description>
<property_shortdescription>Specifies the options.
</property_shortdescription>
<property_isactive>Yes</property_isactive>
<property_visibility>Published</property_visibility>
<property_iswrite>Yes</property_iswrite>
<property_isread>Yes</property_isread>
</property>
<property PK="101766">
<property_fkobject>100448</property_fkobject>
<property_fkproject>100015</property_fkproject>
<property_name>Path</property_name>
<property_type>String</property_type>
<property_description>Note that unlike the usual approach, this path should NOT include the mask, it should be set seperately using the Mask property. This decision was made to compensate for easier design-time configuration.
</property_description>
<property_shortdescription>Specifies the path to search.
</property_shortdescription>
<property_isactive>Yes</property_isactive>
<property_visibility>Published</property_visibility>
<property_iswrite>Yes</property_iswrite>
<property_isread>Yes</property_isread>
</property>
<method PK="101040">
<method_fkobject>100448</method_fkobject>
<method_fkproject>100015</method_fkproject>
<method_name>Search</method_name>
<method_declaration>procedure Search(); virtual;</method_declaration>
<method_description>For each file found, the OnFileFound and OnFileFoundEx events will be raised. You may call Terminate to cancel the search.
</method_description>
<method_shortdescription>Starts the enumeration of files.
</method_shortdescription>
<method_isactive>Yes</method_isactive>
<method_visibility>Public</method_visibility>
</method>
<event PK="100286">
<event_fkobject>100448</event_fkobject>
<event_fkproject>100015</event_fkproject>
<event_name>OnFoundFile</event_name>
<event_declaration>property OnFoundFile;</event_declaration>
<event_shortdescription>Raised when a file or directory is found.</event_shortdescription>
<event_isactive>Yes</event_isactive>
</event>
<event PK="100287">
<event_fkobject>100448</event_fkobject>
<event_fkproject>100015</event_fkproject>
<event_name>OnFoundFileEx</event_name>
<event_declaration>property OnFoundFileEx;</event_declaration>
<event_shortdescription>Raised when a file or directory is found.</event_shortdescription>
<event_isactive>Yes</event_isactive>
</event>
</object>
<object PK="100452">
<object_fkunit>100130</object_fkunit>
<object_fkproject>100015</object_fkproject>
<object_name>TNLDStringsFileSearch</object_name>
<object_inheritedfrom>TNLDFileSearch</object_inheritedfrom>
<object_declaration>TNLDStringsFileSearch = class(TNLDFileSearch)</object_declaration>
<object_shortdescription>Fills a TStrings descendant with the files found.
</object_shortdescription>
<object_bitmapobject_bitmap>
<object_isactive>Yes</object_isactive>
<property PK="101767">
<property_fkobject>100452</property_fkobject>
<property_fkproject>100015</property_fkproject>
<property_name>Strings</property_name>
<property_type>TStrings</property_type>
<property_shortdescription>Specifies the TStrings descendant to write the file names to.</property_shortdescription>
<property_isactive>Yes</property_isactive>
<property_visibility>Public</property_visibility>
<property_iswrite>Yes</property_iswrite>
<property_isread>Yes</property_isread>
</property>
</object>
<routine PK="100051">
<routine_fkunit>100130</routine_fkunit>
<routine_fkproject>100015</routine_fkproject>
<routine_name>NLDEnumFiles</routine_name>
<routine_declaration>procedure NLDEnumFiles(Path: string; CallBack: TNLDFoundFileProc; Options: TFSOptions); overload;</routine_declaration>
<routine_shortdescription>Search a folder using a callback procedure
</routine_shortdescription>
<routine_description>Specify the path (including trailing backslash) + optional mask in the Path parameter. The specified Callback procedure will be called for each encountered file.
</routine_description>
<routine_isactive>Yes</routine_isactive>
</routine>
<routine PK="100052">
<routine_fkunit>100130</routine_fkunit>
<routine_fkproject>100015</routine_fkproject>
<routine_name>NLDEnumFiles</routine_name>
<routine_declaration>procedure NLDEnumFiles(Path: string; CallBack: TNLDFoundFileExProc; Options: TFSOptions); overload;</routine_declaration>
<routine_shortdescription>Search a folder using an extended callback procedure
</routine_shortdescription>
<routine_description>Specify the path (including trailing backslash) + optional mask in the Path parameter. The specified Callback procedure will be called for each encountered file.
</routine_description>
<routine_isactive>Yes</routine_isactive>
</routine>
<routine PK="100053">
<routine_fkunit>100130</routine_fkunit>
<routine_fkproject>100015</routine_fkproject>
<routine_name>NLDEnumFiles</routine_name>
<routine_declaration>procedure NLDEnumFiles(Path: string; CallBack: TNLDFoundFileEvent; Options: TFSOptions); overload;</routine_declaration>
<routine_shortdescription>Search a folder using a method event
</routine_shortdescription>
<routine_description>Specify the path (including trailing backslash) + optional mask in the Path parameter. The specified Callback event will be called for each encountered file.
</routine_description>
<routine_isactive>Yes</routine_isactive>
</routine>
<routine PK="100054">
<routine_fkunit>100130</routine_fkunit>
<routine_fkproject>100015</routine_fkproject>
<routine_name>NLDEnumFiles</routine_name>
<routine_declaration>procedure NLDEnumFiles(Path: string; CallBack: TNLDFoundFileExEvent; Options: TFSOptions); overload;</routine_declaration>
<routine_shortdescription>Search a folder using an extended method event
</routine_shortdescription>
<routine_description>Specify the path (including trailing backslash) + optional mask in the Path parameter. The specified Callback event will be called for each encountered file.
</routine_description>
<routine_isactive>Yes</routine_isactive>
</routine>
<routine PK="100055">
<routine_fkunit>100130</routine_fkunit>
<routine_fkproject>100015</routine_fkproject>
<routine_name>NLDGetFiles</routine_name>
<routine_declaration>procedure NLDGetFiles(Path: string; List: TStrings; Options: TFSOptions);</routine_declaration>
<routine_shortdescription>Search a folder and write all files to the specified list
</routine_shortdescription>
<routine_description>Specify the path (including trailing backslash) + optional mask in the Path parameter. The specified TStrings descendant will be filled with the found files.
</routine_description>
<routine_isactive>Yes</routine_isactive>
</routine>
<type PK="100041">
<type_fkunit>100130</type_fkunit>
<type_name>TFSContinue</type_name>
<type_declaration>TFSContinue = (cCancel, cNextFile, cEnterFolder);</type_declaration>
<type_description>This type is used in various events to determine the course of action. Set it to cCancel to stop further processing, cNextFile to continue as usual and cEnterFolder to recurse into the current directory.
</type_description>
<type_shortdescription>Determines the action to perform next.
</type_shortdescription>
<type_isactive>Yes</type_isactive>
<type_fkproject>100015</type_fkproject>
</type>
<type PK="100039">
<type_fkunit>100130</type_fkunit>
<type_name>TFSOption</type_name>
<type_declaration>TFSOption = (soRecursive, soNoDirs, soDirsOnly, soExcludePath, soRelativePaths, soUseMaskForDirs, soProcessMessages);</type_declaration>
<type_description>soRecursive        Search the subdirectories as well.
soNoDirs           Return files only.
soDirsOnly         Return directories only.
                   This flag is ignored if soNoDirs is set.
soExcludePath      Return the filename only.
soRelativePaths    Return the filename, including the relative
                   path, excluding the leading path separator.
                   This flag is ignored if soExcludePaths is set.
soUseMaskForDirs   Apply the mask to directories as well as files.
soProcessMessages  Call Application.ProcessMessages in each iteration.

</type_description>
<type_shortdescription>Provides various search options.
</type_shortdescription>
<type_isactive>Yes</type_isactive>
<type_fkproject>100015</type_fkproject>
</type>
<type PK="100040">
<type_fkunit>100130</type_fkunit>
<type_name>TFSOptions</type_name>
<type_declaration>TFSOptions = set of TFSOption;</type_declaration>
<type_description>See TFSOption for more a detailed description of each option.
</type_description>
<type_shortdescription>Provides various search options.
</type_shortdescription>
<type_isactive>Yes</type_isactive>
<type_fkproject>100015</type_fkproject>
</type>
<type PK="100044">
<type_fkunit>100130</type_fkunit>
<type_name>TNLDFoundFileEvent</type_name>
<type_declaration>TNLDFoundFileEvent = procedure(const FileName: string; Attributes: Integer; var Continue: TFSContinue) of object;</type_declaration>
<type_description>The FileName indicates the current file or directory name. Depending on the Options set for the corresponding TNLDCustomFileSearch object it may or may not include the (relative or absolute) path name.
</type_description>
<type_shortdescription>Event for found files.
</type_shortdescription>
<type_isactive>Yes</type_isactive>
<type_fkproject>100015</type_fkproject>
</type>
<type PK="100045">
<type_fkunit>100130</type_fkunit>
<type_name>TNLDFoundFileExEvent</type_name>
<type_declaration>TNLDFoundFileExEvent = procedure(const FileName: String; const SearchRec: TSearchRec; var Continue: TFSContinue) of object;</type_declaration>
<type_description>Passes the complete TSearchRec structure to the event. For more information, see TNLDFoundFileEvent.
</type_description>
<type_shortdescription>Extended event for found files.
</type_shortdescription>
<type_isactive>Yes</type_isactive>
<type_fkproject>100015</type_fkproject>
</type>
<type PK="100043">
<type_fkunit>100130</type_fkunit>
<type_name>TNLDFoundFileExProc</type_name>
<type_declaration>TNLDFoundFileExProc = procedure(const FileName: String; const SearchRec: TSearchRec; var Continue: TFSContinue);</type_declaration>
<type_description>Passes the complete TSearchRec structure to the callback procedure. For more information, see TNLDFoundFileProc.
</type_description>
<type_shortdescription>Extended callback procedure for found files.
</type_shortdescription>
<type_isactive>Yes</type_isactive>
<type_fkproject>100015</type_fkproject>
</type>
<type PK="100042">
<type_fkunit>100130</type_fkunit>
<type_name>TNLDFoundFileProc</type_name>
<type_declaration>TNLDFoundFileProc = procedure(const FileName: string; Attributes: Integer; var Continue: TFSContinue);</type_declaration>
<type_description>The FileName indicates the current file or directory name. Depending on the Options set for the corresponding TNLDCustomFileSearch object it may or may not include the (relative or absolute) path name.
</type_description>
<type_shortdescription>Callback procedure for found files.
</type_shortdescription>
<type_isactive>Yes</type_isactive>
<type_fkproject>100015</type_fkproject>
</type>
</unit>
</package>
<project_nodecount>34</project_nodecount>
</project>
